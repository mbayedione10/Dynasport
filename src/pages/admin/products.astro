---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Récupérer le paramètre de catégorie de l'URL
const { searchParams } = Astro.url;
const categoryId = searchParams.get('category');

// Récupération des catégories pour le formulaire
const { data: categories, error: categoriesError } = await supabase
  .from('categories')
  .select('id, name')
  .order('name', { ascending: true });

if (categoriesError) {
  console.error('Erreur lors de la récupération des catégories:', categoriesError);
}

// Récupération des produits de la catégorie sélectionnée
let products = [];
let categoryName = '';

if (categoryId) {
  const { data: categoryData, error: categoryError } = await supabase
    .from('categories')
    .select('name')
    .eq('id', categoryId)
    .single();
  
  if (categoryError) {
    console.error('Erreur lors de la récupération de la catégorie:', categoryError);
  } else {
    categoryName = categoryData.name;
  }

  const { data: productsData, error: productsError } = await supabase
    .from('category_products')
    .select('*')
    .eq('category_id', categoryId)
    .order('created_at', { ascending: false });
  
  if (productsError) {
    console.error('Erreur lors de la récupération des produits:', productsError);
  } else {
    products = productsData;
  }
}
---

<Layout
  title="Gestion des Produits"
  description="Interface d'administration pour gérer les produits par catégorie"
>
  <Navigation />
  
  <main class="pt-20">
    <div class="container py-12">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">
          {categoryId 
            ? `Produits de la catégorie: ${categoryName}` 
            : 'Gestion des Produits'}
        </h1>
        
        {categoryId && (
          <a href="/admin/categories" class="btn-secondary">
            Retour aux catégories
          </a>
        )}
      </div>
      
      {!categoryId && (
        <div class="bg-white rounded-lg shadow p-6 mb-8">
          <h2 class="text-xl font-bold mb-4">Sélectionner une catégorie</h2>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {categories?.map(category => (
              <a 
                href={`/admin/products?category=${category.id}`}
                class="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg text-center transition-colors"
              >
                <span class="font-medium">{category.name}</span>
              </a>
            ))}
          </div>
        </div>
      )}
      
      {categoryId && (
        <div class="bg-white rounded-lg shadow p-6 mb-8">
          <h2 class="text-xl font-bold mb-4">Ajouter un produit</h2>
          <form id="product-form" class="space-y-6">
            <input type="hidden" id="category_id" name="category_id" value={categoryId} />
            
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
                  Nom du produit
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary/20 focus:border-primary"
                />
              </div>
              <div>
                <label for="image_url" class="block text-sm font-medium text-gray-700 mb-2">
                  URL de l'image
                </label>
                <input
                  type="url"
                  id="image_url"
                  name="image_url"
                  required
                  class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary/20 focus:border-primary"
                  placeholder="https://example.com/image.jpg"
                />
              </div>
            </div>
            
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                required
                rows="3"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary/20 focus:border-primary"
              ></textarea>
            </div>
            
            <button type="submit" class="btn-primary">
              Ajouter le produit
            </button>
          </form>
        </div>
      )}

      {categoryId && (
        <div class="bg-white rounded-lg shadow p-6">
          <h2 class="text-xl font-bold mb-4">Produits existants</h2>
          
          {products.length === 0 ? (
            <p class="text-gray-500 italic">Aucun produit dans cette catégorie</p>
          ) : (
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="products-grid">
              {products.map(product => (
                <div class="bg-gray-50 rounded-lg overflow-hidden border border-gray-200">
                  <div class="h-48">
                    <img 
                      src={product.image_url} 
                      alt={product.name} 
                      class="w-full h-full object-cover"
                    />
                  </div>
                  <div class="p-4">
                    <h3 class="font-bold text-lg mb-2">{product.name}</h3>
                    <p class="text-gray-600 text-sm mb-4">{product.description}</p>
                    <div class="flex justify-between items-center">
                      <span class={`px-2 py-1 rounded-full text-xs ${product.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {product.active ? 'Actif' : 'Inactif'}
                      </span>
                      <button 
                        class="text-red-600 hover:text-red-800" 
                        data-id={product.id}
                        onclick="deleteProduct(this.dataset.id)"
                      >
                        Supprimer
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  </main>

  <Footer />
</Layout>

<script define:vars={{ categoryId }}>
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Fonction pour charger les produits
async function loadProducts() {
  if (!categoryId) return;
  
  const { data: products, error } = await supabase
    .from('category_products')
    .select('*')
    .eq('category_id', categoryId)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Erreur lors du chargement des produits:', error);
    return;
  }

  const grid = document.getElementById('products-grid');
  grid.innerHTML = '';

  if (products.length === 0) {
    grid.innerHTML = '<p class="text-gray-500 italic col-span-full">Aucun produit dans cette catégorie</p>';
    return;
  }

  products.forEach(product => {
    const card = document.createElement('div');
    card.className = 'bg-gray-50 rounded-lg overflow-hidden border border-gray-200';
    card.innerHTML = `
      <div class="h-48">
        <img 
          src="${product.image_url}" 
          alt="${product.name}" 
          class="w-full h-full object-cover"
        />
      </div>
      <div class="p-4">
        <h3 class="font-bold text-lg mb-2">${product.name}</h3>
        <p class="text-gray-600 text-sm mb-4">${product.description}</p>
        <div class="flex justify-between items-center">
          <span class="px-2 py-1 rounded-full text-xs ${product.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
            ${product.active ? 'Actif' : 'Inactif'}
          </span>
          <button 
            class="text-red-600 hover:text-red-800" 
            data-id="${product.id}"
            onclick="deleteProduct(this.dataset.id)"
          >
            Supprimer
          </button>
        </div>
      </div>
    `;
    grid.appendChild(card);
  });
}

// Fonction pour supprimer un produit
async function deleteProduct(id) {
  if (!confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {
    return;
  }

  const { error } = await supabase
    .from('category_products')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Erreur lors de la suppression:', error);
    alert('Une erreur est survenue lors de la suppression du produit');
    return;
  }

  loadProducts();
}

// Gérer le formulaire d'ajout
if (categoryId) {
  document.getElementById('product-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const productData = {
      category_id: formData.get('category_id'),
      name: formData.get('name'),
      description: formData.get('description'),
      image_url: formData.get('image_url'),
      active: true
    };

    try {
      const { error } = await supabase
        .from('category_products')
        .insert(productData);

      if (error) throw error;

      // Réinitialiser le formulaire et recharger les produits
      e.target.reset();
      loadProducts();

    } catch (error) {
      console.error('Erreur lors de l\'ajout du produit:', error);
      alert('Une erreur est survenue lors de l\'ajout du produit');
    }
  });
}

// Rendre la fonction deleteProduct globale
window.deleteProduct = deleteProduct;

// Charger les produits au chargement de la page
if (categoryId) {
  document.addEventListener('DOMContentLoaded', loadProducts);
}
</script>